stages:
- build
- deploy_1
- deploy_2

image:
  name: bitnami/kubectl:latest
  entrypoint: ['']

variables:
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  DOCKER_REGISTRY: 10.10.10.106:5000

services:
    - name: docker:20.10.10-dind
      entrypoint: ["dockerd-entrypoint.sh"]
      command: ["--insecure-registry", "10.10.10.106:5000"]

build_kafka:
  stage: build
  image: docker:20.10.10
  variables:
    KAFKA_IMAGE_NAME: breacher/kafka
    KAFKA_IMAGE_TAG: v1.0
  before_script:
    - sleep 5s
  script:
    - cd applications/kafka
    - docker build -t $KAFKA_IMAGE_NAME:$KAFKA_IMAGE_TAG .
    - docker tag $KAFKA_IMAGE_NAME:$KAFKA_IMAGE_TAG $DOCKER_REGISTRY/$KAFKA_IMAGE_NAME:$KAFKA_IMAGE_TAG
    - docker push $DOCKER_REGISTRY/$KAFKA_IMAGE_NAME:$KAFKA_IMAGE_TAG
  only:
    changes:
      - applications/kafka/Dockerfile

build_oniondownloader:
  stage: build
  image: docker:20.10.10
  variables:
    ONIONDOWNLOADER_IMAGE_NAME: breacher/oniondownloader
    ONIONDOWNLOADER_IMAGE_TAG: v1.0
  before_script:
    - sleep 5s
  script:
    - cd applications/oniondownloader
    - docker build -t $ONIONDOWNLOADER_IMAGE_NAME:$ONIONDOWNLOADER_IMAGE_TAG .
    - docker tag $ONIONDOWNLOADER_IMAGE_NAME:$ONIONDOWNLOADER_IMAGE_TAG $DOCKER_REGISTRY/$ONIONDOWNLOADER_IMAGE_NAME:$ONIONDOWNLOADER_IMAGE_TAG
    - docker push $DOCKER_REGISTRY/$ONIONDOWNLOADER_IMAGE_NAME:$ONIONDOWNLOADER_IMAGE_TAG
  only:
    changes:
      - applications/oniondownloader/*

deploy_minio:
  stage: deploy_1
  script:
    - cd applications/minio
    - kubectl apply -f namespace.yaml
    - kubectl delete secret minio-credentials --ignore-not-found -n minio
    - kubectl create secret generic minio-credentials --from-literal=MINIO_ROOT_USER=$MINIO_ROOT_USER --from-literal=MINIO_ROOT_PASSWORD=$MINIO_ROOT_PASSWORD -n minio # define in Gitlab ENV
    - kubectl apply -f deployment.yaml
    - kubectl apply -f service.yaml
  only:
      changes:
        - applications/minio

deploy_crawlab:
  stage: deploy_1
  script:
    - cd applications/crawlab
    - kubectl apply -f namespace.yaml
    - kubectl apply -f mongo-statefulset.yaml
    - kubectl apply -f mongo-service.yaml
    - kubectl apply -f redis-deployment.yaml
    - kubectl apply -f redis-service.yaml
    - kubectl apply -f crawlab-deployment.yaml
    - kubectl apply -f crawlab-service.yaml
  only:
    changes:
      - applications/crawlab

deploy_torproxy:
  stage: deploy_1
  script:
    - cd applications/torproxy
    - kubectl apply -f namespace.yaml
    - kubectl apply -f deployment.yaml
    - kubectl apply -f service.yaml
  only:
    changes:
      - applications/torproxy

deploy_kafka:
  stage: deploy_1
  image:
    name: dtzar/helm-kubectl:latest
    entrypoint: ['']
  before_script:
    - helm repo add bitnami https://charts.bitnami.com/bitnami
  script:
    - cd applications/kafka
    - kubectl apply -f namespace.yaml
    - helm template kafka bitnami/kafka -f values.yaml --version 14.9.3 -n kafka > kafka.yaml
    - kubectl apply -f kafka.yaml -n kafka
    # - kubectl exec -n kafka kafka-0 -- kafka-topics.sh --alter --bootstrap-server localhost:9092 --topic crawlab_test.results_onions_farmer --partitions 10
  only:
    changes:
      - applications/kafka

deploy_oniondownloader:
  stage: deploy_2
  script:
    - cd applications/oniondownloader
    - kubectl apply -f namespace.yaml
    - kubectl delete secret minio-credentials --ignore-not-found -n oniondownloader
    - kubectl create secret generic minio-credentials --from-literal=MINIO_ONION_ACCESS_KEY=$MINIO_ONION_ACCESS_KEY --from-literal=MINIO_ONION_SECRET_KEY=$MINIO_ONION_SECRET_KEY -n oniondownloader # define in Gitlab ENV
    - kubectl apply -f deployment.yaml
  only:
    changes:
      - applications/oniondownloader
